//Unobunded Knapsack: source: Codestudio

Types of Problem: 1.Unbounded knapsack(itself)
                  2.Coin Change 1 (ways to make coin (infinte supply)
                  3.Coin Change 2 ()
                  4.Rod cutting
                  5.Ribbion Cut
Unbounded Knapsack:
Problem Statement
Suggest Edit
You are given ‘N’ items with certain ‘PROFIT’ and ‘WEIGHT’ and a knapsack with weight capacity ‘W’. You need to fill the knapsack with the items in such a way that you get the maximum profit. You are allowed to take one item multiple times.
For Example
Let us say we have 'N' = 3 items and a knapsack of capacity 'W' =  10
'PROFIT' = { 5, 11, 13 }
'WEIGHT' = { 2, 4, 6 }

We can fill the knapsack as:
1 item of weight 6 and 1 item of weight 4.
1 item of weight 6 and 2 items of weight 2.
2 items of weight 4 and 1 item of weight 2.
5 items of weight 2.
The maximum profit will be from case 3 i.e ‘27’. Therefore maximum profit = 27.

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   int dp[n+1][w+1];
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=0;      //base condition
    }
    for(int j=0;j<=w;j++)
    {
        dp[0][j]=0;
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=w;j++)
        {
            if(weight[i-1]>j)      //if the weight of the item is bigger than than capacity we ignore that item and move forward
            {
                dp[i][j]=dp[i-1][j];
            }
            else
            {
                if(weight[i-1]<=j)   
                {
                    dp[i][j]=max(profit[i-1]+dp[i][j-weight[i-1]],dp[i-1][j]);
                }
            }
        }
    }
    return dp[n][w];
}

